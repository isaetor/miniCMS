datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  isActive      Boolean   @default(true)
  role          Role      @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  comments      Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
}

model OtpCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model LoginLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userEmail String
  method    String
  type      String // login | logout
  timestamp DateTime @default(now())
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  createdAt   DateTime @default(now())
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  articles Article[]
}

model Article {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String    @unique
  content   String
  excerpt   String?
  image     String?
  published DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  authorId   String    @db.ObjectId
  author     User      @relation(fields: [authorId], references: [id])
  categoryId String    @db.ObjectId
  category   Category  @relation(fields: [categoryId], references: [id])
  comments   Comment[]

  @@index([authorId])
  @@index([categoryId])
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isApproved Boolean  @default(false)

  // Relations
  authorId  String    @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  articleId String    @db.ObjectId
  article   Article   @relation(fields: [articleId], references: [id])
  parentId  String?   @db.ObjectId
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentToComment")
}

enum Role {
  USER
  ADMIN
}
